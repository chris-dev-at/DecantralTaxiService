@using Simulator.Components.Services
@using Communications
@using Communications.Models
@using Simulator.Components.Models
@inject EventStreamSimulator ess
@inject HttpClient HttpClient

<div class="management-section">
    <h3>Driver Management</h3>

    <div class="driver-controls">
        <div class="create-controls">
            <input type="number" @bind="_newDriversCount" min="1" class="count-input" />
            <button @onclick="CreateDummyDrivers" class="btn btn-create">Create</button>
            <button @onclick="DeleteAllDrivers" class="btn btn-delete-all">Delete All</button>
        </div>

        <div class="driver-list">
            @foreach (var driver in ess.SimDrivers)
            {
                <div class="driver-item @GetStateClass(driver.State)">
                    <span class="driver-id">@driver.Id <span class="driver-state">(@driver.State) @driver.PricePerKm.ToString("0.00")€/km</span></span>
                    <button @onclick="() => DeleteDriver(driver.Id)" class="btn btn-delete">Delete</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private int _newDriversCount = 10;
    private Random _random = new Random();

    protected override void OnInitialized()
    {
        Task.Run(async() =>
        {
            while (true) //zu meiner Verteidigung: es ist 4:12 und will es nicht mehr so elegant wie bei WorldMap machen
            {
                await InvokeAsync(StateHasChanged);
                await Task.Delay(GlobalConfig.TimeBetweenTicksMs);

            }
        });
    }

    private void DeleteDriver(string driverId)
    {
        var driverToRemove = ess.SimDrivers.FirstOrDefault(d => d.Id == driverId);
        if (driverToRemove != null)
        {
            ess.SimDrivers.Remove(driverToRemove);
            driverToRemove.Dispose();
            StateHasChanged();
        }
    }
    private void DeleteAllDrivers()
    {
        foreach (var driver in ess.SimDrivers)
        {
            driver.Dispose();
        }
        ess.SimDrivers.Clear();
        StateHasChanged();
    }

    private string GetStateClass(DriverState state)
    {
        return state switch
        {
            DriverState.Unavailable => "state-unavailable-soft",
            DriverState.Available => "state-available-soft",
            DriverState.OfferedRide => "state-offeredride-soft",
            DriverState.OnRouteToPassenger => "state-onroutetopassenger-soft",
            DriverState.OnRouteToDestination => "state-onroutetodestination-soft",
            _ => "state-unavailable-soft"
        };
    }
    
    private void CreateDummyDrivers()
    {
        for (int i = 0; i < _newDriversCount && ess.SimDrivers.Count < 9001; i++) //max of 9000 ids
        {
            var d = CreateDummyDriver();
            ess.SimDrivers.Add(d);
        }
        StateHasChanged();
    }

    private SimDriver CreateDummyDriver()
    {
        var newId = GenerateUniqueDriverId();
        var d = new SimDriver(newId, new Location()
        {
            X = _random.Next(0, GlobalConfig.GlobalLength),
            Y = _random.Next(0, GlobalConfig.GlobalWidth)
        }, 
        _random.NextDouble() * (GlobalConfig.MaxPricePerKm - GlobalConfig.MinPricePerKm) + GlobalConfig.MinPricePerKm, 
        HttpClient);
        return d;
    }

    private string GenerateUniqueDriverId()
    {
        string newId;
        do
        {
            newId = $"SimDriver{_random.Next(1000, 9999)}"; //max of 9000 ids, limited above
        } while (ess.SimDrivers.Any(d => d.Id == newId));
        
        return newId;
    }
}

<style>
    .management-section {
        margin-top: 2rem;
        padding: 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .driver-controls {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .create-controls {
        display: flex;
        gap: 1rem;
        align-items: center;
        flex-wrap: wrap; /* Allows wrapping on smaller screens */
    }

    .count-input {
        width: 100px;
        padding: 0.25rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .driver-list {
        height: calc(100vh - 300px); /* Adjust based on your layout */
        overflow-y: auto;
        border: 1px solid #eee;
        border-radius: 4px;
        padding: 0.5rem;
    }

    .driver-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        background-color: #f8f9fa;
        border-radius: 4px;
        border: 1px solid rgba(0, 0, 0, 0.05);
        margin: 2px 0;
        transition: background-color 0.3s ease;
    }

    .driver-item:hover {
        background-color: #e9ecef;
    }

    .driver-id {
        font-family: monospace;
        font-size: 0.9rem;
    }

    .btn-create {
        background-color: #28a745;
    }

    .btn-create:hover {
        background-color: #218838;
    }

    .btn-delete {
        background-color: #dc3545;
        padding: 0.25rem 0.5rem;
        font-size: 0.8rem;
    }
    .btn-delete-all {
        background-color: #dc3545; !important;
        color: white;
        padding: 0.5rem 1rem;
    }
    .btn-delete-all:hover {
        background-color: #bb2d3b;
    }

    .btn-delete:hover {
        background-color: #bb2d3b;
    }


    /* State Background Colors */
    .state-unavailable-soft { background-color: #E0E0E0; }  /* Soft Gray */
    .state-available-soft { background-color: #C8E6C9; }    /* Mint Green */
    .state-offeredride-soft { background-color: #FFE0B2; }  /* Peach */
    .state-onroutetopassenger-soft { background-color: #E1BEE7; } /* Lavender */
    .state-onroutetodestination-soft { background-color: #B3E5FC; } /* Sky Blue */

    /* Add state text styling */
    .driver-state {
        font-size: 0.8em;
        opacity: 0.8;
        margin-left: 0.3em;
    }
    
</style>